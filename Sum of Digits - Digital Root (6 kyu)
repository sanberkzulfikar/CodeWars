// Sum of Digits / Digital Root (6 kyu)
// https://www.codewars.com/kata/541c8630095125aba6000c00/

// Description:

// Digital root is the recursive sum of all the digits in a number.

// Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.

// Examples
//     16  -->  1 + 6 = 7
//    942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6
// 132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6
// 493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2

// My Solution:

function digitalRoot(n) {
    let sum = 0
    n = n.toString().split('').map(x => Number(x))
    while (n.length !== 1) {
        for (let i = 0; i <= n.length - 1; i++) {
            sum = sum + n[i]
        }
        n = sum.toString().split('').map(x => Number(x))
        sum = 0
    }
    return Number(n)
}
